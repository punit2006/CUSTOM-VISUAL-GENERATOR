# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sUr2FxkmKmFExRsSmbQtF7Wdn5M3JOen
"""

# Commented out IPython magic to ensure Python compatibility.
# %env PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True

# Medical Image Generator using Original Stable Diffusion
# No fine-tuning needed - just better prompts!

import torch
from diffusers import StableDiffusionPipeline
from PIL import Image
import os

class MedicalImageGenerator:
    def __init__(self, model_id="runwayml/stable-diffusion-v1-5"):
        """Initialize the medical image generator"""
        print("Loading Stable Diffusion model...")

        self.pipe = StableDiffusionPipeline.from_pretrained(
            model_id,
            torch_dtype=torch.float16,
            safety_checker=None,
            requires_safety_checker=False,
        )

        device = "cuda" if torch.cuda.is_available() else "cpu"
        self.pipe = self.pipe.to(device)
        print(f"Model loaded on {device}")

        # Optimized medical prompts that work well
        self.medical_prompts = {
            "xray": [
                "chest x-ray medical scan, black and white, clinical diagnostic",
                "bone x-ray radiograph, medical imaging, skeletal structure",
                "dental x-ray scan, medical radiography, teeth and jaw",
                "spine x-ray medical image, vertebrae, diagnostic radiology"
            ],

            "mri": [
                "MRI brain scan, medical imaging, grayscale, cross-section",
                "MRI abdominal scan, medical diagnostic image, internal organs",
                "cardiac MRI scan, heart medical imaging, diagnostic",
                "knee MRI medical scan, joint imaging, orthopedic"
            ],

            "ct": [
                "CT scan cross-section, medical imaging, anatomical structure",
                "chest CT scan, lungs medical imaging, diagnostic radiology",
                "abdominal CT scan, medical diagnostic image, organs",
                "head CT scan, brain medical imaging, neurological"
            ],

            "ultrasound": [
                "ultrasound medical scan, grayscale, diagnostic imaging",
                "cardiac ultrasound, heart medical scan, echocardiogram",
                "abdominal ultrasound, medical diagnostic image",
                "prenatal ultrasound scan, medical imaging"
            ],

            "microscopic": [
                "medical microscopy image, cellular structure, pathology",
                "histology medical slide, tissue sample, microscopic",
                "blood cells microscopic view, medical laboratory",
                "cancer cells microscopic image, pathology slide"
            ],

            "anatomical": [
                "anatomical diagram, medical illustration, human body",
                "skeletal system medical diagram, bones anatomy",
                "cardiovascular system anatomy, medical illustration",
                "nervous system anatomical diagram, medical education"
            ]
        }

        # Common negative prompts for medical images
        self.negative_prompt = "colorful, cartoon, artistic, painting, illustration, fantasy, anime, bright colors, vibrant, artistic style, creative, decorative"

    def generate_medical_image(self, scan_type="xray", custom_prompt=None,
                             num_images=1, height=512, width=512):
        """
        Generate medical images

        Args:
            scan_type: Type of medical scan (xray, mri, ct, ultrasound, microscopic, anatomical)
            custom_prompt: Custom prompt (overrides scan_type)
            num_images: Number of images to generate
            height, width: Image dimensions
        """

        if custom_prompt:
            prompts = [custom_prompt]
        else:
            if scan_type not in self.medical_prompts:
                print(f"Unknown scan type: {scan_type}")
                print(f"Available types: {list(self.medical_prompts.keys())}")
                return None
            prompts = self.medical_prompts[scan_type][:num_images]

        generated_images = []

        for i, prompt in enumerate(prompts):
            print(f"Generating image {i+1}/{len(prompts)}")
            print(f"Prompt: {prompt}")

            with torch.no_grad():
                image = self.pipe(
                    prompt=prompt,
                    negative_prompt=self.negative_prompt,
                    num_inference_steps=30,
                    height=height,
                    width=width,
                    guidance_scale=8.0
                ).images[0]

            generated_images.append(image)

            # Save image
            filename = f"medical_{scan_type}_{i+1}.png"
            image.save(filename)
            print(f"Saved: {filename}")

        return generated_images

    def generate_prostate_specific(self):
        """Generate prostate-specific medical images"""
        prostate_prompts = [
            "prostate MRI scan, medical imaging, pelvic anatomy, diagnostic",
            "prostate ultrasound medical scan, transrectal imaging",
            "prostate biopsy medical image, pathology, microscopic",
            "prostate anatomical diagram, medical illustration, male anatomy",
            "prostate CT scan, pelvic medical imaging, diagnostic radiology"
        ]

        images = []
        for i, prompt in enumerate(prostate_prompts):
            print(f"Generating prostate image {i+1}/{len(prostate_prompts)}")

            with torch.no_grad():
                image = self.pipe(
                    prompt=prompt,
                    negative_prompt=self.negative_prompt,
                    num_inference_steps=35,
                    height=512,
                    width=512,
                    guidance_scale=9.0  # Higher guidance for more specific results
                ).images[0]

            images.append(image)
            filename = f"prostate_medical_{i+1}.png"
            image.save(filename)
            print(f"Saved: {filename}")

        return images

    def batch_generate(self, categories=None, images_per_category=2):
        """Generate multiple types of medical images"""
        if categories is None:
            categories = list(self.medical_prompts.keys())

        all_images = {}

        for category in categories:
            print(f"\n=== Generating {category.upper()} images ===")
            images = self.generate_medical_image(
                scan_type=category,
                num_images=images_per_category
            )
            all_images[category] = images

        return all_images

# Usage Example
if __name__ == "__main__":
    # Initialize generator
    generator = MedicalImageGenerator()

    # Option 1: Generate specific type
    print("=== Generating X-ray images ===")
    xray_images = generator.generate_medical_image("xray", num_images=3)

    # Option 2: Generate prostate-specific images
    print("\n=== Generating prostate-specific images ===")
    prostate_images = generator.generate_prostate_specific()

    # Option 3: Generate custom medical image
    print("\n=== Generating custom medical image ===")
    custom_image = generator.generate_medical_image(
        custom_prompt="medical scan of kidney stones, diagnostic imaging, urological"
    )

    # Option 4: Batch generate different types
    print("\n=== Batch generating multiple types ===")
    batch_images = generator.batch_generate(
        categories=["mri", "ct", "ultrasound"],
        images_per_category=2
    )

    print("\nAll images generated successfully!")
    print("Check your current directory for the saved images.")

